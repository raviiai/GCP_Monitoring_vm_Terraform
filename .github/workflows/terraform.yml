

name: 'Terraform CI CD'
on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - review_requested

permissions:
  contents: read
jobs:
  terraform-plan:
    name: 'Development'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_email: ${{ vars.EMAIL }}
        TF_VAR_instance_name: ${{ vars.INSTANCE_NAME }}
        TF_VAR_project_id: ${{ secrets.PROJECT_ID }}

###############       SAVING ARTIFACTS TO THE GITHUB
    # - name: Save Artifact
    #   id: save-artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ inputs.pr_id }}-tf-plan
    #     path: ${{ inputs.terraform_directory }}/tfplan

##############################################
## TERRAFORM PLAN
##############################################

    - name: Terraform Plan
      id: plan
      run: |
        echo 'plan<<EOF' >> $GITHUB_OUTPUT
        terraform plan -no-color -out=tfplan >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
      working-directory: ./
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_email: ${{ vars.EMAIL }}
        TF_VAR_instance_name: ${{ vars.INSTANCE_NAME }}
        TF_VAR_project_id: ${{ secrets.PROJECT_ID }}

##############################################
## COMMENT PLAN
##############################################

    - name: Comment Plan
      id: comment-plan
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        # issue-number: ${{ inputs.pr_id }}
        body: |
          Terraform Plan:
  
            ```
            ${{ steps.plan.outputs.plan }}
            ```
  
          Plan saved to GH artifacts.

############################################
## TERRAFORM APPLY FOR THE PRODUCTION ENV
############################################

  terraform-apply:
    name: 'Production'
    runs-on: ubuntu-latest
    environment: prod
    needs: [terraform-plan]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_email: ${{ vars.EMAIL }}
        TF_VAR_instance_name: ${{ vars.INSTANCE_NAME }}
        TF_VAR_project_id: ${{ secrets.PROJECT_ID }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_email: ${{ vars.EMAIL }}
        TF_VAR_instance_name: ${{ vars.INSTANCE_NAME }}
        TF_VAR_project_id: ${{ secrets.PROJECT_ID }}

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_VAR_email: ${{ vars.EMAIL }}
        TF_VAR_instance_name: ${{ vars.INSTANCE_NAME }}
        TF_VAR_project_id: ${{ secrets.PROJECT_ID }}
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
